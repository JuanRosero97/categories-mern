[{"C:\\Users\\JuanRosero\\Desktop\\Categories\\categories\\src\\components\\AddCategory.jsx":"1","C:\\Users\\JuanRosero\\Desktop\\Categories\\categories\\src\\components\\Categories.jsx":"2","C:\\Users\\JuanRosero\\Desktop\\Categories\\categories\\src\\App.jsx":"3","C:\\Users\\JuanRosero\\Desktop\\Categories\\categories\\src\\index.jsx":"4","C:\\Users\\JuanRosero\\Desktop\\Categories\\categories\\src\\components\\PageNotFound.jsx":"5","E:\\PROYECTOS REACT\\categories\\src\\components\\PageNotFound.jsx":"6","E:\\PROYECTOS REACT\\categories\\src\\App.jsx":"7","E:\\PROYECTOS REACT\\categories\\src\\components\\Categories.jsx":"8"},{"size":15742,"mtime":1609867070610,"results":"9","hashOfConfig":"10"},{"size":9836,"mtime":1609867223493,"results":"11","hashOfConfig":"10"},{"size":737,"mtime":1609816776175,"results":"12","hashOfConfig":"10"},{"size":205,"mtime":1609539804521,"results":"13","hashOfConfig":"10"},{"size":3510,"mtime":1609866382043,"results":"14","hashOfConfig":"10"},{"size":3504,"mtime":1609881678346,"results":"15","hashOfConfig":"16"},{"size":737,"mtime":1609816776175,"results":"17","hashOfConfig":"16"},{"size":9836,"mtime":1609867223493,"results":"18","hashOfConfig":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},"14g4vqy",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"m4bvmh",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\JuanRosero\\Desktop\\Categories\\categories\\src\\components\\AddCategory.jsx",["38","39"],"import React, {useState, useEffect} from 'react'\r\nimport { Snackbar, AppBar, Toolbar, Button, TextField, Grid, CssBaseline, Avatar, Typography, Container, IconButton} from \"@material-ui/core\"\r\nimport { makeStyles, createMuiTheme } from '@material-ui/core/styles'\r\nimport {Dialog, DialogActions, DialogTitle} from '@material-ui/core'\r\nimport { SketchPicker } from 'react-color'\r\nimport CategorySharpIcon from '@material-ui/icons/CategorySharp'\r\nimport MuiAlert from '@material-ui/lab/Alert'\r\n\r\nconst Alert = props => {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\n// Colores a utilizar según \r\nconst colorTema = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      light: '#757ce8',\r\n      main: '#4caf50',\r\n      dark: '#002884',\r\n      contrastText: '#fff',\r\n    },\r\n    secondary: {\r\n      light: '#ff7961',\r\n      dark: '#087f23',\r\n      main: '#3d8c3f',\r\n      contrastText: '#000',\r\n    },\r\n    delete:{\r\n      light: '#ff5f52',\r\n      dark: '#8e0000',\r\n      main: '#c62828',\r\n      contrastText: '#000',\r\n    },\r\n  },\r\n})\r\n\r\n// Estilos para el FRONT - END\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n      marginTop: theme.spacing(5),\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n    },\r\n    footer: {\r\n      backgroundColor: theme.palette.background.paper,\r\n      padding: theme.spacing(6, 0, 6), \r\n    },\r\n    avatar: {\r\n      margin: theme.spacing(1),\r\n      backgroundColor: colorTema.palette.primary.main,\r\n    },\r\n    icon: {\r\n      marginRight: theme.spacing(1),\r\n      color: colorTema.palette.primary.contrastText,\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n      },\r\n    form: {\r\n      width: '100%', \r\n      marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n      margin: theme.spacing(3, 0, 2),\r\n      backgroundColor: colorTema.palette.secondary.dark,\r\n      '&:hover': {\r\n        backgroundColor: colorTema.palette.secondary.main,\r\n    }\r\n    },\r\n    borrar: {\r\n      margin: theme.spacing(1, 0, 2),\r\n      backgroundColor: colorTema.palette.delete.main,\r\n      '&:hover': {\r\n        backgroundColor: colorTema.palette.delete.dark,\r\n    }\r\n    },\r\n    contFooter: {\r\n      width:\"100%\",\r\n      padding: theme.spacing(0, 0, 0), \r\n    },\r\n  }))\r\n\r\nconst AddCategory = props => {\r\n    const classes = useStyles()\r\n\r\n    //Maneja el toast para aceptar borrar la categoria\r\n    const [openDialog, setOpenDialog] = useState(false)\r\n\r\n    // Almacena la información ingresada para nombre de la categoría, la descripción y el _id de la misma\r\n    const [data_sign, setData_sign] = useState({})\r\n    //name: '', description: '', _id: ''\r\n    \r\n    // Controla el textinput para el nombre de la categoría\r\n    const [disabledName, setDisabledName] = useState()\r\n\r\n       //Controla el error en el campo de texto para nombre en caso de dejarlo vacío\r\n       const [error, setError] = useState({\r\n        name: false, text: \"\"\r\n      })    \r\n  \r\n      //Almacena el color seleccionado por usuario para la categoría \r\n      const [picker,setPicker] = useState({\r\n        defaultColor: \"#087f23\", changeColor: \"#087f23\", color:{\r\n          r:\"8\", g:\"127\", b:\"35\", a:\"1\"\r\n        }\r\n      })    \r\n      \r\n      //Toast para avisar que la categoría fue añadida, sobre la ocurrencia de un error o si se ha eliminado la categoria\r\n      const [open, setOpen] = useState({\r\n        right: false, alert: false, delete: false\r\n      })\r\n   \r\n    //////////////////////// Rellena los datos de la categoría a editar gracias al _id enviado por URL //////////////////////////////////\r\n    useEffect(() => {\r\n      const getUrlVars = () => {\r\n        var vars = {}\r\n        var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, (m,key,value) => {\r\n            vars[key] = value\r\n        })\r\n        return vars\r\n      }\r\n  \r\n      const id = getUrlVars()['_id']\r\n\r\n      if(id !== undefined){\r\n        fetch(`/api/getCategories/${id}`)\r\n          .then(results => results.json())\r\n          .then(data => {\r\n            setData_sign({...data_sign, name: data.name, description: data.description, _id: id})\r\n            setPicker({ ...picker, color: data.background.rgb, changeColor: data.background})\r\n            setDisabledName(true)\r\n          })\r\n          .catch(error => console.log(error))\r\n        }\r\n      else{ // Sino se envía un id\r\n        setData_sign({...data_sign, name: \"\", description: \"\"})\r\n        setDisabledName(false)\r\n      }\r\n    }, [])\r\n \r\n    ////////////////////////////////Funciones para el control de las alertas o toast///////////////////////////////////////\r\n    \r\n    const handleClick = (text) => {\r\n      if(text === \"delete\")\r\n        setOpen({ ...open, delete: true})\r\n      else\r\n        text === \"right\" ? setOpen({ ...open, right: true}) : setOpen({ ...open, alert: true})       \r\n    }\r\n  \r\n    const handleClose = (event, reason) => {\r\n      if (reason === 'clickaway') {\r\n        return\r\n      }  \r\n      setOpen({ ...open, right: false})\r\n    }\r\n\r\n    const handleCloseAlert = (event, reason) => {\r\n      if (reason === 'clickaway') {\r\n        return\r\n      }  \r\n      setOpen({ ...open, alert: false})   \r\n    }\r\n\r\n    const handleCloseDelete = (event, reason) => {\r\n      if (reason === 'clickaway') {\r\n        return\r\n      }  \r\n      setOpen({ ...open, delete: false})   \r\n    }\r\n\r\n    ///////////////// Manejan los eventos de apertura y cierre del toast para aceptar la eliminación de la categoría ////////////////////\r\n    const handleClickOpenDialog = () => {\r\n      setOpenDialog(true)\r\n    }\r\n\r\n    const handleCloseDialog = () => {\r\n      setOpenDialog(false)\r\n    }\r\n\r\n    /////////////Funciones para atender los eventos de selección de color, del boton \"añadir categoría\" y los campos de texto///////////////////////////////////////\r\n    const handlerColor = (color) =>{\r\n      setPicker({ ...picker, color: color.rgb, changeColor: color.hex})\r\n    }\r\n\r\n    const handleSubmit = event => {\r\n      event.preventDefault()\r\n      window.scrollTo(0, 0)\r\n      if (data_sign._id === undefined)\r\n        data_sign.name === \"\" || error.name ? setError({ ...error, name: true, text: \"Vacío o incorrecto\" }) : añadir()\r\n      else \r\n        editar()\r\n    }\r\n    \r\n    const handleInputText = event => {\r\n      setData_sign({\r\n        ...data_sign,\r\n        [event.target.name] : event.target.value\r\n      })\r\n      setError({ ...error, name: false, text: \"\" })\r\n    }\r\n\r\n    ///////////////////// Función para añadir (metiende POST) una categoría a la BD ///////////////////////////////////////\r\n    const añadir = () => {\r\n      var card = {}\r\n      if (data_sign.description === \"\")\r\n        card = {background: picker.changeColor , name: data_sign.name.toUpperCase() , description: \"  \"}\r\n      else\r\n        card = {background: picker.changeColor , name: data_sign.name.toUpperCase() , description: data_sign.description}\r\n      \r\n      fetch('/api/getCategories', {\r\n        method: 'POST', \r\n        body: JSON.stringify(card), \r\n        headers:{\r\n          'Content-Type': 'application/json'\r\n        }\r\n      }).then(res => {\r\n          res.ok ? clear() : handleClick(\"alert\")}\r\n        )\r\n      .catch(error => console.error('Error:', error))\r\n    }\r\n\r\n    const clear = () => { /// Resetea los campos a los valores iniciales\r\n      handleClick(\"right\")\r\n      setPicker({ ...picker, changeColor: \"#087f23\", color:{\r\n        r:\"8\", g:\"127\", b:\"35\", a:\"1\"\r\n      }})\r\n      setData_sign({...data_sign, name: '', description: ''})\r\n    } \r\n    \r\n    ///////////////////// Función para editar (metiende PUT) una categoría según su _id ///////////////////////////////////////\r\n    const editar = () => {\r\n      var card = {}\r\n      if (data_sign.description === \"\")\r\n        card = {background: picker.changeColor , name: data_sign.name.toUpperCase() , description: \"  \"}\r\n      else\r\n        card = {background: picker.changeColor , name: data_sign.name.toUpperCase() , description: data_sign.description}\r\n      \r\n      fetch(`/api/getCategories/${data_sign._id}`, {\r\n        method: 'PUT', \r\n        body: JSON.stringify(card), \r\n        headers:{\r\n          'Content-Type': 'application/json'\r\n        }\r\n      }).then(res => {\r\n         handleClick(\"right\")}\r\n        )\r\n      .catch(error => console.error('Error:', error))\r\n    }\r\n\r\n    /////////////////////////////////////////Func cuando se presiona borrar la categoría ///////////////////////////////////////////////              \r\n    const borrar = (id) => {\r\n     fetch(`/api/getCategories/${id}`, { method: 'DELETE' })\r\n     .then(res => {\r\n        res.json()\r\n        handleClick(\"delete\")\r\n        window.setTimeout(() => {\r\n          window.location.href = \"/Categories\"  \r\n        }, 500) \r\n     }).catch(error => console.log(error))\r\n   }\r\n\r\n    /////////////////////////// MATERIAL UI para el FRONT- END /////////////////////////////////////\r\n    return (\r\n      <React.Fragment>\r\n        <Container component = \"main\" maxWidth = \"xs\">\r\n              <AppBar position = \"fixed\">\r\n                <Toolbar>\r\n                <IconButton className = {classes.icon}  href = \"/Categories\"><CategorySharpIcon /></IconButton>\r\n                  <Typography className ={classes.title} variant = \"h6\" color = \"inherit\" >\r\n                    { data_sign._id === undefined ? \"Añadir categoría\" : \"Editar categoría\" } \r\n                  </Typography>\r\n                  <Button color = \"inherit\" href = \"/Categories\">Ver categorías</Button>\r\n                </Toolbar>\r\n              </AppBar>\r\n              <Toolbar />\r\n\r\n          <CssBaseline />\r\n          <div className = {classes.paper}>\r\n            <Avatar className = {classes.avatar}>\r\n              <CategorySharpIcon />\r\n            </Avatar>\r\n            <Typography component = \"h1\" variant = \"h5\">\r\n              { data_sign._id === undefined ? \"Añadir categoría\" : \"Editar categoría\" } \r\n            </Typography>\r\n            <form id = \"my_form\" className = {classes.form} noValidate onSubmit = {handleSubmit}>\r\n              <Grid container spacing = {2}>\r\n                <Grid item xs = {12}>\r\n                  <TextField\r\n                    placeholder=\"Nombre\"\r\n                    label=\"Nombre\"\r\n                    onChange = {handleInputText}\r\n                    error = {error.name}\r\n                    helperText = {error.text}\r\n                    value = {data_sign.name || ''}\r\n                    fullWidth\r\n                    variant = \"outlined\"\r\n                    required                    \r\n                    id = \"firstName\"\r\n                    name = \"name\"\r\n                    inputProps = {{ maxLength: 16 }}\r\n                    disabled = { disabledName }                   \r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextField                                     \r\n                    multiline\r\n                    rows = {2}\r\n                    rowsMax = {2}\r\n                    placeholder=\"Descripción\"\r\n                    label=\"Descripción\"\r\n                    onChange = {handleInputText}\r\n                    value = {data_sign.description || ''}\r\n                    fullWidth\r\n                    variant = \"outlined\"                    \r\n                    id = \"description\"\r\n                    name = \"description\"\r\n                    inputProps = {{ maxLength: 56 }}                    \r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} >\r\n                <Typography>\r\n                    Escoge un color para la categoría:\r\n                </Typography>\r\n                </Grid>                \r\n                <Grid item xs = {12} \r\n                  container\r\n                  direction = \"column\"\r\n                  alignItems = \"center\"\r\n                  justify = \"center\"                \r\n                >\r\n                  <SketchPicker color = {picker.changeColor} onChange={handlerColor}/>\r\n                </Grid>                \r\n              </Grid>\r\n              <Button\r\n                type = \"submit\"\r\n                fullWidth\r\n                variant = \"contained\"\r\n                color = \"primary\"\r\n                className = {classes.submit}\r\n              >\r\n                { data_sign._id === undefined ? \"Añadir\" : \"Editar\" } \r\n              </Button>\r\n              {data_sign._id !== undefined ? \r\n                <Button\r\n                onClick={handleClickOpenDialog}\r\n                display = { data_sign._id === undefined ? 'none' : 'block' } \r\n                fullWidth\r\n                variant = \"contained\"\r\n                color = \"primary\"\r\n                className = {classes.borrar}\r\n                >\r\n                  Borrar\r\n                </Button>   \r\n                : \"\"     \r\n              }                           \r\n              <Snackbar open = {open.right} autoHideDuration = {4000} onClose = {handleClose}\r\n                anchorOrigin = {{ vertical: 'top', horizontal: 'center'}}\r\n                key = \"snackbar1\"\r\n                >\r\n                <Alert onClose = {handleClose} severity = \"success\">\r\n                  { data_sign._id === undefined ? \"Categoría añadida !!\" : \"Categoría editada !!\" }                   \r\n                </Alert>\r\n              </Snackbar>\r\n              <Snackbar open = {open.alert} autoHideDuration = {4000} onClose = {handleCloseAlert}\r\n                anchorOrigin = {{ vertical: 'top', horizontal: 'center'}}\r\n                key = \"snackbar2\"\r\n                >\r\n                <Alert onClose = {handleCloseAlert} severity = \"error\">\r\n                  Prueba con otro nombre o intenta de nuevo más tarde!!\r\n                </Alert>\r\n              </Snackbar>\r\n              <Snackbar open = {open.delete} autoHideDuration = {4000} onClose = {handleCloseDelete}\r\n                anchorOrigin = {{ vertical: 'top', horizontal: 'center'}}\r\n                key = \"snackbar3\"\r\n                >\r\n                <Alert onClose = {handleCloseDelete} severity = \"info\">\r\n                  Categoría eliminada !!                  \r\n                </Alert>\r\n              </Snackbar>\r\n              <Dialog open={openDialog} onClose={handleClose} \r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n              >\r\n                <DialogTitle id=\"alert-dialog-title\">{\"Eliminar categoría?\"}</DialogTitle>\r\n                  <DialogActions>\r\n                    <Button onClick={handleCloseDialog} color=\"primary\">\r\n                      Cancelar\r\n                    </Button>\r\n                    <Button color=\"primary\" autoFocus onMouseDown={event => event.stopPropagation()}\r\n                      onClick = { event => {\r\n                      event.stopPropagation()\r\n                      event.preventDefault()\r\n                      borrar(data_sign._id)\r\n                      handleCloseDialog()\r\n                    }}>\r\n                      Eliminar\r\n                    </Button>        \r\n                  </DialogActions>                       \r\n              </Dialog>                                \r\n            </form>\r\n          </div>\r\n        </Container>\r\n        \r\n        <Grid item xs = {12}>\r\n          <footer className = {classes.footer}>\r\n            <Typography variant = \"h6\" align = \"center\" gutterBottom>\r\n              Juan José Rosero Calderón\r\n            </Typography>\r\n            <Typography variant = \"subtitle1\" align = \"center\" color = \"textSecondary\" component = \"p\">\r\n              Prueba de habilidad\r\n            </Typography>\r\n          </footer>\r\n        </Grid>   \r\n      </React.Fragment>      \r\n    )\r\n}\r\n\r\nexport default AddCategory\r\n","C:\\Users\\JuanRosero\\Desktop\\Categories\\categories\\src\\components\\Categories.jsx",[],"C:\\Users\\JuanRosero\\Desktop\\Categories\\categories\\src\\App.jsx",[],["40","41"],"C:\\Users\\JuanRosero\\Desktop\\Categories\\categories\\src\\index.jsx",[],["42","43"],"C:\\Users\\JuanRosero\\Desktop\\Categories\\categories\\src\\components\\PageNotFound.jsx",["44"],"E:\\PROYECTOS REACT\\categories\\src\\components\\PageNotFound.jsx",[],"E:\\PROYECTOS REACT\\categories\\src\\App.jsx",[],"E:\\PROYECTOS REACT\\categories\\src\\components\\Categories.jsx",[],{"ruleId":"45","severity":1,"message":"46","line":118,"column":13,"nodeType":"47","messageId":"48","endLine":118,"endColumn":18},{"ruleId":"49","severity":1,"message":"50","line":140,"column":8,"nodeType":"51","endLine":140,"endColumn":10,"suggestions":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"53","replacedBy":"57"},{"ruleId":"55","replacedBy":"58"},{"ruleId":"45","severity":1,"message":"59","line":2,"column":35,"nodeType":"47","messageId":"48","endLine":2,"endColumn":39},"no-unused-vars","'parts' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'data_sign' and 'picker'. Either include them or remove the dependency array. You can also do a functional update 'setData_sign(d => ...)' if you only need 'data_sign' in the 'setData_sign' call.","ArrayExpression",["60"],"no-native-reassign",["61"],"no-negated-in-lhs",["62"],["61"],["62"],"'Icon' is defined but never used.",{"desc":"63","fix":"64"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [data_sign, picker]",{"range":"65","text":"66"},[4455,4457],"[data_sign, picker]"]